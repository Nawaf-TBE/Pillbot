name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test basic imports and functionality
      run: |
        cd src
        python -c "from services.data_store import *; print('Data store imports successful')"
        python -c "from services.pdf_utils import *; print('PDF utils imports successful')"
        python -c "from services.parsing_service import *; print('Parsing service imports successful')"
        python -c "from services.llm_service import *; print('LLM service imports successful')"

    - name: Test data store functionality
      run: |
        cd src
        python test_data_store.py

    - name: Test PDF utilities
      run: |
        cd src
        python -c "from services.pdf_utils import check_pdf_is_native; print('PDF utils working')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true 